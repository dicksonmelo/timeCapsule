{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/dickson/Repositorios/capsula-do-tempo/src/context/CountdownContext.jsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useContext, useEffect } from \"react\";\nvar countdownTimeout;\nexport var CountdownContext = /*#__PURE__*/createContext();\nexport function CountdownProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(25 * 60),\n      time = _useState[0],\n      setTime = _useState[1];\n\n  var _useState2 = useState(false),\n      isActive = _useState2[0],\n      setIsActive = _useState2[1];\n\n  var _useState3 = useState(false),\n      hasFinished = _useState3[0],\n      setHasFinished = _useState3[1];\n\n  var minutes = Math.floor(time / 60);\n  var seconds = time % 60; // sempre vai retornar os segundos como resto, pois é uma divisão real, então os décimos (segundos) não serão dividos\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(25 * 60);\n    setHasFinished(false);\n  }\n\n  useEffect(function () {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(function () {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n    }\n  }, [isActive, time]); // sempre que o estado 'active' mudar, a função será executada. E sempre que \"time\" mudar, também\n\n  return /*#__PURE__*/_jsxDEV(CountdownContext.Provider, {\n    value: {\n      minutes: minutes,\n      seconds: seconds,\n      hasFinished: hasFinished,\n      isActive: isActive,\n      startCountdown: startCountdown,\n      resetCountdown: resetCountdown\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CountdownProvider, \"Tp0fghG+cijK4GlNi/k3XaPdVkM=\");\n\n_c = CountdownProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CountdownProvider\");","map":{"version":3,"sources":["/home/dickson/Repositorios/capsula-do-tempo/src/context/CountdownContext.jsx"],"names":["createContext","useState","useContext","useEffect","countdownTimeout","CountdownContext","CountdownProvider","children","time","setTime","isActive","setIsActive","hasFinished","setHasFinished","minutes","Math","floor","seconds","startCountdown","resetCountdown","clearTimeout","setTimeout"],"mappings":";;;;;AAAA,SACEA,aADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,SAJF,QAKO,OALP;AAOA,IAAIC,gBAAJ;AACA,OAAO,IAAMC,gBAAgB,gBAAGL,aAAa,EAAtC;AAEP,OAAO,SAASM,iBAAT,OAAyC;AAAA;;AAAA,MAAZC,QAAY,QAAZA,QAAY;;AAAA,kBACtBN,QAAQ,CAAC,KAAK,EAAN,CADc;AAAA,MACvCO,IADuC;AAAA,MACjCC,OADiC;;AAAA,mBAEdR,QAAQ,CAAC,KAAD,CAFM;AAAA,MAEvCS,QAFuC;AAAA,MAE7BC,WAF6B;;AAAA,mBAGRV,QAAQ,CAAC,KAAD,CAHA;AAAA,MAGvCW,WAHuC;AAAA,MAG1BC,cAH0B;;AAI9C,MAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWR,IAAI,GAAG,EAAlB,CAAhB;AACA,MAAMS,OAAO,GAAGT,IAAI,GAAG,EAAvB,CAL8C,CAKnB;;AAE3B,WAASU,cAAT,GAA0B;AACxBP,IAAAA,WAAW,CAAC,IAAD,CAAX;AACD;;AAED,WAASQ,cAAT,GAA0B;AACxBC,IAAAA,YAAY,CAAChB,gBAAD,CAAZ;AACAO,IAAAA,WAAW,CAAC,KAAD,CAAX;AACAF,IAAAA,OAAO,CAAC,KAAK,EAAN,CAAP;AACAI,IAAAA,cAAc,CAAC,KAAD,CAAd;AACD;;AAEDV,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIO,QAAQ,IAAIF,IAAI,GAAG,CAAvB,EAA0B;AACxBJ,MAAAA,gBAAgB,GAAGiB,UAAU,CAAC,YAAM;AAClCZ,QAAAA,OAAO,CAACD,IAAI,GAAG,CAAR,CAAP;AACD,OAF4B,EAE1B,IAF0B,CAA7B;AAGD,KAJD,MAIO,IAAIE,QAAQ,IAAIF,IAAI,KAAK,CAAzB,EAA4B;AACjCK,MAAAA,cAAc,CAAC,IAAD,CAAd;AACAF,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,GATQ,EASN,CAACD,QAAD,EAAWF,IAAX,CATM,CAAT,CAlB8C,CA2BxB;;AAEtB,sBACE,QAAC,gBAAD,CAAkB,QAAlB;AACE,IAAA,KAAK,EAAE;AACLM,MAAAA,OAAO,EAAPA,OADK;AAELG,MAAAA,OAAO,EAAPA,OAFK;AAGLL,MAAAA,WAAW,EAAXA,WAHK;AAILF,MAAAA,QAAQ,EAARA,QAJK;AAKLQ,MAAAA,cAAc,EAAdA,cALK;AAMLC,MAAAA,cAAc,EAAdA;AANK,KADT;AAAA,cAUGZ;AAVH;AAAA;AAAA;AAAA;AAAA,UADF;AAcD;;GA3CeD,iB;;KAAAA,iB","sourcesContent":["import {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n} from \"react\";\n\nlet countdownTimeout;\nexport const CountdownContext = createContext();\n\nexport function CountdownProvider({ children }) {\n  const [time, setTime] = useState(25 * 60);\n  const [isActive, setIsActive] = useState(false);\n  const [hasFinished, setHasFinished] = useState(false);\n  const minutes = Math.floor(time / 60);\n  const seconds = time % 60; // sempre vai retornar os segundos como resto, pois é uma divisão real, então os décimos (segundos) não serão dividos\n\n  function startCountdown() {\n    setIsActive(true);\n  }\n\n  function resetCountdown() {\n    clearTimeout(countdownTimeout);\n    setIsActive(false);\n    setTime(25 * 60);\n    setHasFinished(false)\n  }\n\n  useEffect(() => {\n    if (isActive && time > 0) {\n      countdownTimeout = setTimeout(() => {\n        setTime(time - 1);\n      }, 1000);\n    } else if (isActive && time === 0) {\n      setHasFinished(true);\n      setIsActive(false);\n    }\n  }, [isActive, time]); // sempre que o estado 'active' mudar, a função será executada. E sempre que \"time\" mudar, também\n\n  return (\n    <CountdownContext.Provider\n      value={{\n        minutes,\n        seconds,\n        hasFinished,\n        isActive,\n        startCountdown,\n        resetCountdown,\n      }}\n    >\n      {children}\n    </CountdownContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}