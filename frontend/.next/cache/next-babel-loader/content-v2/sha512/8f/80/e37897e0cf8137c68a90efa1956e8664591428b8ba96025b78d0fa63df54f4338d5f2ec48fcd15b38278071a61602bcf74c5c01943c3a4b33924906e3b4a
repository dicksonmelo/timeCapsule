{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/home/dickson/Repositorios/capsula-do-tempo/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/home/dickson/Repositorios/capsula-do-tempo/src/components/Countdown.jsx\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { fileURLToPath } from \"url\";\nimport { CountdownContext } from \"../context/CountdownContext\";\nexport function Countdown() {\n  _s();\n\n  var _useContext = useContext(CountdownContext),\n      minutes = _useContext.minutes,\n      seconds = _useContext.seconds,\n      hasFinished = _useContext.hasFinished,\n      isActive = _useContext.isActive,\n      resetCountdown = _useContext.resetCountdown,\n      startCountdown = _useContext.startCountdown; // .padStart vai conferir se a string tem 2 caracteres, senão, ele coloca o 0. Elimina a necessidade do if\n  // desestruturando o array que é retornado com o .split\n\n\n  var _String$padStart$spli = String(minutes).padStart(2, \"0\").split(\"\"),\n      _String$padStart$spli2 = _slicedToArray(_String$padStart$spli, 2),\n      minuteLeft = _String$padStart$spli2[0],\n      minuteRight = _String$padStart$spli2[1];\n\n  var _String$padStart$spli3 = String(seconds).padStart(2, \"0\").split(\"\"),\n      _String$padStart$spli4 = _slicedToArray(_String$padStart$spli3, 2),\n      secondLeft = _String$padStart$spli4[0],\n      secondRight = _String$padStart$spli4[1];\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: minuteRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: \":\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondLeft\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: secondRight\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), hasFinished ? /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: true,\n      children: [\"Ciclo encerrado\", \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this) : isActive ?\n    /*#__PURE__*/\n    // Diego usou um fragment para envelopar esse conteúdo, mas acho que não precisa\n    _jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: resetCountdown,\n      children: \"Abandonar ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"button\", {\n      type: \"button\",\n      onClick: startCountdown,\n      children: isActive ? \"Abandonar Ciclo\" : \"Iniciar um ciclo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Countdown, \"3Qhn/nPqdFrBohhlFCzQsSJBZL8=\");\n\n_c = Countdown;\n\nvar _c;\n\n$RefreshReg$(_c, \"Countdown\");","map":{"version":3,"sources":["/home/dickson/Repositorios/capsula-do-tempo/src/components/Countdown.jsx"],"names":["useState","useEffect","useContext","fileURLToPath","CountdownContext","Countdown","minutes","seconds","hasFinished","isActive","resetCountdown","startCountdown","String","padStart","split","minuteLeft","minuteRight","secondLeft","secondRight"],"mappings":";;;;;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,aAAT,QAA8B,KAA9B;AACA,SAASC,gBAAT,QAAiC,6BAAjC;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AAAA,oBAQtBH,UAAU,CAACE,gBAAD,CARY;AAAA,MAExBE,OAFwB,eAExBA,OAFwB;AAAA,MAGxBC,OAHwB,eAGxBA,OAHwB;AAAA,MAIxBC,WAJwB,eAIxBA,WAJwB;AAAA,MAKxBC,QALwB,eAKxBA,QALwB;AAAA,MAMxBC,cANwB,eAMxBA,cANwB;AAAA,MAOxBC,cAPwB,eAOxBA,cAPwB,EAU1B;AACA;;;AAX0B,8BAYQC,MAAM,CAACN,OAAD,CAAN,CAAgBO,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAZR;AAAA;AAAA,MAYnBC,UAZmB;AAAA,MAYPC,WAZO;;AAAA,+BAaQJ,MAAM,CAACL,OAAD,CAAN,CAAgBM,QAAhB,CAAyB,CAAzB,EAA4B,GAA5B,EAAiCC,KAAjC,CAAuC,EAAvC,CAbR;AAAA;AAAA,MAanBG,UAbmB;AAAA,MAaPC,WAbO;;AAe1B,sBACE;AAAA,4BACE;AAAA,8BACE;AAAA,gCACE;AAAA,oBAAOH;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,eAME;AAAA,gCACE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAA,oBAAOC;AAAP;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cANF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAaGV,WAAW,gBACV;AAAQ,MAAA,QAAQ,MAAhB;AAAA,oCACkB,GADlB;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,GAIRC,QAAQ;AAAA;AAAK;AACf;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAEC,cAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADU,gBAQV;AACE,MAAA,IAAI,EAAC,QADP;AAEE,MAAA,OAAO,EAAEC,cAFX;AAAA,gBAIGF,QAAQ,GAAG,iBAAH,GAAuB;AAJlC;AAAA;AAAA;AAAA;AAAA,YAzBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAmCD;;GAlDeJ,S;;KAAAA,S","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\nimport { fileURLToPath } from \"url\";\nimport { CountdownContext } from \"../context/CountdownContext\";\n\nexport function Countdown() {\n  const {\n    minutes,\n    seconds,\n    hasFinished,\n    isActive,\n    resetCountdown,\n    startCountdown,\n  } = useContext(CountdownContext);\n\n  // .padStart vai conferir se a string tem 2 caracteres, senão, ele coloca o 0. Elimina a necessidade do if\n  // desestruturando o array que é retornado com o .split\n  const [minuteLeft, minuteRight] = String(minutes).padStart(2, \"0\").split(\"\");\n  const [secondLeft, secondRight] = String(seconds).padStart(2, \"0\").split(\"\");\n\n  return (\n    <div>\n      <div>\n        <div>\n          <span>{minuteLeft}</span>\n          <span>{minuteRight}</span>\n        </div>\n        <span>:</span>\n        <div>\n          <span>{secondLeft}</span>\n          <span>{secondRight}</span>\n        </div>\n      </div>\n\n      {hasFinished ? (\n        <button disabled>\n          Ciclo encerrado{\" \"}\n        </button>\n      ) : isActive ? ( // Diego usou um fragment para envelopar esse conteúdo, mas acho que não precisa\n        <button\n          type=\"button\"\n          onClick={resetCountdown}\n        >\n          Abandonar ciclo\n        </button>\n      ) : (\n        <button\n          type=\"button\"\n          onClick={startCountdown}\n        >\n          {isActive ? \"Abandonar Ciclo\" : \"Iniciar um ciclo\"}\n        </button>\n      )}\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}